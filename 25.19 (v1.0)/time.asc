; File: time.asc. Basic timer library for ZX Spectrum
; set_int: sets interrupts to handle a timer
set_int
; IM2 interruptions preparations
		di                      ; disable interrupts
		ld hl, int_cod			; interrupt routine address
		ld ($feff), hl       	; store the interrupt routine in $feff 
		ld a, $fe          		; clo_rou page
		ld i, a          		; i = $fe, ISR address in $feff
		im 2                  	; set IM2
		ei                 		; enable interrupts
		
		ld hl, interrupt_activation	; interrupts state
		ld (hl), 1				; active now
 
int_cod							; <---- interruption code jumps here!
		push af					; save registers
		push bc					;
		push de					;
		push hl					;
		push ix					;

		; interruption code start ---------------------------------------------
		
		ld hl, tik_cou			; decrease ticks, one per interrupt
		dec (hl)				; 
		jr nz, act_exi 			; if not 0, skip period actions
		
		ld (hl), 50				; initiate ticks for next cycle
		call timer_function_	; call timer actions	
		
 		; interruption code end -----------------------------------------------
 
act_exi	xor a					;
		ld hl, interrupt_activation ; check status
		cp (hl)					;
		
		pop ix					; restore registers
		pop hl					;
		pop de					;
		pop bc					;
		;pop af					;		

		; problem: after restoring AF, the cp result is lost. 
		; if I do it after, system crashes (AF restoration ruined)
		
		jr z, tim_exi			; from cp above: if 0 (inactive), skip enabling
		ei						; enable interrupts
tim_exi	pop af
		reti					; return

