; File: memory.asc. Basic memory management for z80 computers

; mem_rea: read memory position (Memory.read (address))
; it can be used for 1 bytes (E register) or two bytes (DE register)
mem_rea pop ix			; <<< pop return address
    	pop hl			; <<< variable value
    	pop de			; <<< variable address
		
		ld e, (hl)		; read 1st byte
		ld d, 0		    ; read 2nd byte
		
		push de			; >>> push address, dummy
		push de			; >>> push value
		push ix			; >>> push return address
		ret

; mem_wri: write a memory position (Memory.write (address, value))
; 8 bits only for simplicity
; note that there is no check for ROM addresses.
mem_wri	pop ix			; <<< pop return address
    	pop de			; <<< value value
    	pop bc			; <<< value address
    	pop hl			; <<< address value
    	pop bc			; <<< address address

		ld (hl), e		; read 1st byte
		push ix			; >>> push return address
		ret

; mem_mov: move a memory block (Memory.move (origin, destination, size))
; all 16-bit values
mem_mov	pop ix			; <<< pop return address
    	pop bc			; <<< size value
    	pop de			; <<< size address
     	pop hl			; <<< origin value
    	pop de			; <<< origin address
    	pop de			; <<< dest value
    	pop af			; <<< dest address   	
 
 mmv_loo ld a, (de)
 		ld (hl), a
 		inc hl
 		inc de
 		dec bc
 		push hl
 		ld hl, 0
 		sbc hl, bc
 		pop hl
 		jr nz, mmv_loo
 		
    	push ix			; >>> push return address
    	ret